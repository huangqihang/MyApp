git diff # 用来比较工作区文件与暂存区或者版本库中指定版本的文件的区别

git diff -- test.txt #工作区与暂存区的区别/工作区与版本库最新提交的区别

git diff HEAD -- test.txt #工作区与版本库最新提交的区别（HEAD指定了与最新的文件进行比较）

===============================================================
丢弃暂存区：1. 暂存区回退到工作区；2.暂存区被丢弃

git reset test.txt
#1. add之后没有再修改，则暂存区的内容回退到工作区
#2. add之后又修改了，暂存区被丢弃

===============================================================
工作区与暂存区都将被丢弃

git reset --hard HEAD^ #回退到倒数第2个最新的版本

git reset --hard 3628164 #回退到指定版本

git reset --soft HEAD^ #回退到倒数第2个最新版本，同时将上1次提交的修改放到暂存区中

===============================================================
丢弃工作区的修改，回到最近一次git add或git commit时的状态

git checkout -- test.txt # 将暂存区的修改覆盖工作区(如果已add到暂存区)/用版本库的最新版本覆盖工作区


===============================================================

查看日志

git log --pretty=oneline #简约风格
git log --graph --pretty=oneline --abbrev-commit #显示分支的合并情况
git log --graph #看分支合并图
git reflog #查看你的每一次命令，找到版本号

commit id 
HEAD
HEAD^
HEAD^^
HEAD~100
	




===============================================================
远程仓库与本地仓库

【建立远程仓库：登录github，建立仓库】

ssh-keygen -t rsa -C "j2ee_hqh@163"
将上面生成的id_rsa.pub公钥粘贴到SSH KEY中


【配置本地环境】
git config --global user.name "huangqihang"
git config --global user.email "j2ee_hqh@163.com"

【初始化当前目录为1个Git仓库】
cd f:/work/workspace/learn/MyApp
git init

git add .
git commit -m 'init'


【将本地仓库与远程仓库关联】
git remote add origin git@github.com:huangqihang/MyApp.git

#推送本地文件到仓库（第1次需要-u 参数 -u: 添加文件，并建立本地与远程仓库的关联，这样之后就不需要-u了。）
git push -u origin master
git push origin master


===============================================================

建立分支

git branch dev
git checkout dev
--->简写
git checkout -b dev


git branch #查看本地分支

git branch -r #查看远程分支


git checkout master # 切换到master主分支

git merge dev # 合并指定分支到当前分支(将dev的修改合并到当前master分支)

git merge --no-ff -m "merge with no-ff" dev #--no-ff参数，表示禁用Fast forward，会在merge时生成一个新的commit


【bug分支】
git stash #把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash list
git stash pop #恢复的同时把stash内容也删了

git checkout master
git checkout -b issue-101 #新建bug分支


【新功能分支】
git checkout master
git checkout -b feature-xxx


【远程分支-多人协作分支】
============>>>>将本地分支推送到远程remote，第一次一定要加-u参数，否则之后的修改无法推送到远程分支上！

git remote -v #查看远程库的信息

#新建本地分支feature
git checkout -b feature 

#推送到github上的远程分支名
git push -u origin feature

#推送到github上的远程分支名称可以另取名称
git push -u origin feature:myFeature #将远程分支上取名myFeature

#删除github上的远程分支
git push origin :feature 

#当feature分支开发完成后，将代码合并到master分支的步骤
git checkout master
git checkout -b dev_for_merge #新建master分支，用来合并远程分支feature
git merge origin/feature #把该远程分支的内容合并到当前分支

git push orgin master #当前分支推送到master

或者
git checkout master 
git merge dev_for_merge








